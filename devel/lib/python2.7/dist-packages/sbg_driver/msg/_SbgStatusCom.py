# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgStatusCom.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SbgStatusCom(genpy.Message):
  _md5sum = "0586194daf83121bc54eda7bece4880f"
  _type = "sbg_driver/SbgStatusCom"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
# SbgStatus submessage

# PORT A: False in case of low level communication error.
bool port_a

# PORT B: False in case of low level communication error.
bool port_b

# PORT C: False in case of low level communication error.
bool port_c

# PORT D: False in case of low level communication error.
bool port_d

# PORT E: False in case of low level communication error.
bool port_e

# PORT A RX: False in case of saturation on PORT A input
bool port_a_rx

# PORT A TX: False in case of saturation on PORT A output
bool port_a_tx

# PORT B RX: False in case of saturation on PORT B input
bool port_b_rx

# PORT B TX: False in case of saturation on PORT B output
bool port_b_tx

# PORT C RX: False in case of saturation on PORT C input
bool port_c_rx

# PORT C TX: False in case of saturation on PORT C output
bool port_c_tx

# PORT D RX: False in case of saturation on PORT D input
bool port_d_rx

# PORT D TX: False in case of saturation on PORT D output
bool port_d_tx

# PORT E RX: False in case of saturation on PORT E input
bool port_e_rx

# PORT E TX: False in case of saturation on PORT E output
bool port_e_tx

# CAN RX: False in case of saturation on CAN Bus output buffer
bool can_rx

# CAN TX: False in case of saturation on CAN Bus input buffer
bool can_tx

# CAN BUS
# 0 CAN BUS OFF 		Bus OFF operation due to too much errors.
# 1 CAN BUS TX_RX_ERR 	Transmit or received error.
# 2 CAN BUS OK 			The CAN bus is working correctly.
# 3 CAN BUS ERROR 		A general error has occurred on the CAN bus.
uint8 can_status"""
  __slots__ = ['port_a','port_b','port_c','port_d','port_e','port_a_rx','port_a_tx','port_b_rx','port_b_tx','port_c_rx','port_c_tx','port_d_rx','port_d_tx','port_e_rx','port_e_tx','can_rx','can_tx','can_status']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       port_a,port_b,port_c,port_d,port_e,port_a_rx,port_a_tx,port_b_rx,port_b_tx,port_c_rx,port_c_tx,port_d_rx,port_d_tx,port_e_rx,port_e_tx,can_rx,can_tx,can_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgStatusCom, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.port_a is None:
        self.port_a = False
      if self.port_b is None:
        self.port_b = False
      if self.port_c is None:
        self.port_c = False
      if self.port_d is None:
        self.port_d = False
      if self.port_e is None:
        self.port_e = False
      if self.port_a_rx is None:
        self.port_a_rx = False
      if self.port_a_tx is None:
        self.port_a_tx = False
      if self.port_b_rx is None:
        self.port_b_rx = False
      if self.port_b_tx is None:
        self.port_b_tx = False
      if self.port_c_rx is None:
        self.port_c_rx = False
      if self.port_c_tx is None:
        self.port_c_tx = False
      if self.port_d_rx is None:
        self.port_d_rx = False
      if self.port_d_tx is None:
        self.port_d_tx = False
      if self.port_e_rx is None:
        self.port_e_rx = False
      if self.port_e_tx is None:
        self.port_e_tx = False
      if self.can_rx is None:
        self.can_rx = False
      if self.can_tx is None:
        self.can_tx = False
      if self.can_status is None:
        self.can_status = 0
    else:
      self.port_a = False
      self.port_b = False
      self.port_c = False
      self.port_d = False
      self.port_e = False
      self.port_a_rx = False
      self.port_a_tx = False
      self.port_b_rx = False
      self.port_b_tx = False
      self.port_c_rx = False
      self.port_c_tx = False
      self.port_d_rx = False
      self.port_d_tx = False
      self.port_e_rx = False
      self.port_e_tx = False
      self.can_rx = False
      self.can_tx = False
      self.can_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18B().pack(_x.port_a, _x.port_b, _x.port_c, _x.port_d, _x.port_e, _x.port_a_rx, _x.port_a_tx, _x.port_b_rx, _x.port_b_tx, _x.port_c_rx, _x.port_c_tx, _x.port_d_rx, _x.port_d_tx, _x.port_e_rx, _x.port_e_tx, _x.can_rx, _x.can_tx, _x.can_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.port_a, _x.port_b, _x.port_c, _x.port_d, _x.port_e, _x.port_a_rx, _x.port_a_tx, _x.port_b_rx, _x.port_b_tx, _x.port_c_rx, _x.port_c_tx, _x.port_d_rx, _x.port_d_tx, _x.port_e_rx, _x.port_e_tx, _x.can_rx, _x.can_tx, _x.can_status,) = _get_struct_18B().unpack(str[start:end])
      self.port_a = bool(self.port_a)
      self.port_b = bool(self.port_b)
      self.port_c = bool(self.port_c)
      self.port_d = bool(self.port_d)
      self.port_e = bool(self.port_e)
      self.port_a_rx = bool(self.port_a_rx)
      self.port_a_tx = bool(self.port_a_tx)
      self.port_b_rx = bool(self.port_b_rx)
      self.port_b_tx = bool(self.port_b_tx)
      self.port_c_rx = bool(self.port_c_rx)
      self.port_c_tx = bool(self.port_c_tx)
      self.port_d_rx = bool(self.port_d_rx)
      self.port_d_tx = bool(self.port_d_tx)
      self.port_e_rx = bool(self.port_e_rx)
      self.port_e_tx = bool(self.port_e_tx)
      self.can_rx = bool(self.can_rx)
      self.can_tx = bool(self.can_tx)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18B().pack(_x.port_a, _x.port_b, _x.port_c, _x.port_d, _x.port_e, _x.port_a_rx, _x.port_a_tx, _x.port_b_rx, _x.port_b_tx, _x.port_c_rx, _x.port_c_tx, _x.port_d_rx, _x.port_d_tx, _x.port_e_rx, _x.port_e_tx, _x.can_rx, _x.can_tx, _x.can_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.port_a, _x.port_b, _x.port_c, _x.port_d, _x.port_e, _x.port_a_rx, _x.port_a_tx, _x.port_b_rx, _x.port_b_tx, _x.port_c_rx, _x.port_c_tx, _x.port_d_rx, _x.port_d_tx, _x.port_e_rx, _x.port_e_tx, _x.can_rx, _x.can_tx, _x.can_status,) = _get_struct_18B().unpack(str[start:end])
      self.port_a = bool(self.port_a)
      self.port_b = bool(self.port_b)
      self.port_c = bool(self.port_c)
      self.port_d = bool(self.port_d)
      self.port_e = bool(self.port_e)
      self.port_a_rx = bool(self.port_a_rx)
      self.port_a_tx = bool(self.port_a_tx)
      self.port_b_rx = bool(self.port_b_rx)
      self.port_b_tx = bool(self.port_b_tx)
      self.port_c_rx = bool(self.port_c_rx)
      self.port_c_tx = bool(self.port_c_tx)
      self.port_d_rx = bool(self.port_d_rx)
      self.port_d_tx = bool(self.port_d_tx)
      self.port_e_rx = bool(self.port_e_rx)
      self.port_e_tx = bool(self.port_e_tx)
      self.can_rx = bool(self.can_rx)
      self.can_tx = bool(self.can_tx)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18B = None
def _get_struct_18B():
    global _struct_18B
    if _struct_18B is None:
        _struct_18B = struct.Struct("<18B")
    return _struct_18B
