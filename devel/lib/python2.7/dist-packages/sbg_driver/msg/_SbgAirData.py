# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgAirData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sbg_driver.msg
import std_msgs.msg

class SbgAirData(genpy.Message):
  _md5sum = "f7982abc9b7165b89ea4d8dda93717f9"
  _type = "sbg_driver/SbgAirData"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
Header header

# Time since sensor is powered up micro s
uint32 time_stamp

# Airdata sensor status
SbgAirDataStatus status

# Raw absolute pressure measured by the barometer sensor in Pascals.
float64 pressure_abs

# Altitude computed from barometric altimeter in meters and positive upward.
float64 altitude

# Raw differential pressure measured by the pitot tube in Pascal.
float64 pressure_diff

# True airspeed measured by a pitot tube in m.s^-1 and positive forward.
float64 true_air_speed

# Outside air temperature in Â°C that could be used to compute true airspeed from differential pressure.
float64 air_temperature
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sbg_driver/SbgAirDataStatus
# SBG Ellipse Messages
# Submessage

# True if the time stamp field represents a delay instead of an absolute time stamp.
bool is_delay_time

# True if the pressure field is filled and valid.
bool pressure_valid

# True if the barometric altitude field is filled and valid.
bool altitude_valid

# True if the differential pressure field is filled and valid.
bool pressure_diff_valid

# True if the true airspeed field is filled and valid.
bool air_speed_valid

# True if the output air temperature field is filled and valid.
bool air_temperature_valid"""
  __slots__ = ['header','time_stamp','status','pressure_abs','altitude','pressure_diff','true_air_speed','air_temperature']
  _slot_types = ['std_msgs/Header','uint32','sbg_driver/SbgAirDataStatus','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_stamp,status,pressure_abs,altitude,pressure_diff,true_air_speed,air_temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgAirData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.status is None:
        self.status = sbg_driver.msg.SbgAirDataStatus()
      if self.pressure_abs is None:
        self.pressure_abs = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.pressure_diff is None:
        self.pressure_diff = 0.
      if self.true_air_speed is None:
        self.true_air_speed = 0.
      if self.air_temperature is None:
        self.air_temperature = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.time_stamp = 0
      self.status = sbg_driver.msg.SbgAirDataStatus()
      self.pressure_abs = 0.
      self.altitude = 0.
      self.pressure_diff = 0.
      self.true_air_speed = 0.
      self.air_temperature = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I6B5d().pack(_x.time_stamp, _x.status.is_delay_time, _x.status.pressure_valid, _x.status.altitude_valid, _x.status.pressure_diff_valid, _x.status.air_speed_valid, _x.status.air_temperature_valid, _x.pressure_abs, _x.altitude, _x.pressure_diff, _x.true_air_speed, _x.air_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = sbg_driver.msg.SbgAirDataStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.time_stamp, _x.status.is_delay_time, _x.status.pressure_valid, _x.status.altitude_valid, _x.status.pressure_diff_valid, _x.status.air_speed_valid, _x.status.air_temperature_valid, _x.pressure_abs, _x.altitude, _x.pressure_diff, _x.true_air_speed, _x.air_temperature,) = _get_struct_I6B5d().unpack(str[start:end])
      self.status.is_delay_time = bool(self.status.is_delay_time)
      self.status.pressure_valid = bool(self.status.pressure_valid)
      self.status.altitude_valid = bool(self.status.altitude_valid)
      self.status.pressure_diff_valid = bool(self.status.pressure_diff_valid)
      self.status.air_speed_valid = bool(self.status.air_speed_valid)
      self.status.air_temperature_valid = bool(self.status.air_temperature_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I6B5d().pack(_x.time_stamp, _x.status.is_delay_time, _x.status.pressure_valid, _x.status.altitude_valid, _x.status.pressure_diff_valid, _x.status.air_speed_valid, _x.status.air_temperature_valid, _x.pressure_abs, _x.altitude, _x.pressure_diff, _x.true_air_speed, _x.air_temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = sbg_driver.msg.SbgAirDataStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 50
      (_x.time_stamp, _x.status.is_delay_time, _x.status.pressure_valid, _x.status.altitude_valid, _x.status.pressure_diff_valid, _x.status.air_speed_valid, _x.status.air_temperature_valid, _x.pressure_abs, _x.altitude, _x.pressure_diff, _x.true_air_speed, _x.air_temperature,) = _get_struct_I6B5d().unpack(str[start:end])
      self.status.is_delay_time = bool(self.status.is_delay_time)
      self.status.pressure_valid = bool(self.status.pressure_valid)
      self.status.altitude_valid = bool(self.status.altitude_valid)
      self.status.pressure_diff_valid = bool(self.status.pressure_diff_valid)
      self.status.air_speed_valid = bool(self.status.air_speed_valid)
      self.status.air_temperature_valid = bool(self.status.air_temperature_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I6B5d = None
def _get_struct_I6B5d():
    global _struct_I6B5d
    if _struct_I6B5d is None:
        _struct_I6B5d = struct.Struct("<I6B5d")
    return _struct_I6B5d
