# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgShipMotion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sbg_driver.msg
import std_msgs.msg

class SbgShipMotion(genpy.Message):
  _md5sum = "f76d2a0b5a6d09d258ebd78ee0233cd0"
  _type = "sbg_driver/SbgShipMotion"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
Header header

# Time since sensor is powered up us 
uint32 time_stamp

# Main heave period in seconds. s float 4 4
uint16 heave_period

# [Surge, Sway, Heave (positive down)] at main location (in m)
# Note : Surge & Sway are not fulfilled
geometry_msgs/Vector3 ship_motion

# [Longitudinal, Lateral, Vertical (positive down)] acceleration (in m/s2)
geometry_msgs/Vector3 acceleration

# [Longitudinal, Lateral, Vertical (positive down)] velocity (in m/s)
geometry_msgs/Vector3 velocity

# Ship motion output status
SbgShipMotionStatus status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: sbg_driver/SbgShipMotionStatus
# SBG Ellipse Messages
# SbgShipMotionStatus

# True after heave convergence time.
# False in following conditions:
# - Turn occurred and no velocity aiding is available
# - Heave reached higher/lower limits
# - If a step is detected and filter has to re-converge
# - If internal failure
bool heave_valid

# True if heave output is compensated for transient accelerations
bool heave_vel_aided

# True if the swell period is provided in this output
bool period_available

# True if the period returned is assumed to be valid or not.
bool period_valid"""
  __slots__ = ['header','time_stamp','heave_period','ship_motion','acceleration','velocity','status']
  _slot_types = ['std_msgs/Header','uint32','uint16','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','sbg_driver/SbgShipMotionStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_stamp,heave_period,ship_motion,acceleration,velocity,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgShipMotion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.heave_period is None:
        self.heave_period = 0
      if self.ship_motion is None:
        self.ship_motion = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.status is None:
        self.status = sbg_driver.msg.SbgShipMotionStatus()
    else:
      self.header = std_msgs.msg.Header()
      self.time_stamp = 0
      self.heave_period = 0
      self.ship_motion = geometry_msgs.msg.Vector3()
      self.acceleration = geometry_msgs.msg.Vector3()
      self.velocity = geometry_msgs.msg.Vector3()
      self.status = sbg_driver.msg.SbgShipMotionStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IH9d4B().pack(_x.time_stamp, _x.heave_period, _x.ship_motion.x, _x.ship_motion.y, _x.ship_motion.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.status.heave_valid, _x.status.heave_vel_aided, _x.status.period_available, _x.status.period_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ship_motion is None:
        self.ship_motion = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.status is None:
        self.status = sbg_driver.msg.SbgShipMotionStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.time_stamp, _x.heave_period, _x.ship_motion.x, _x.ship_motion.y, _x.ship_motion.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.status.heave_valid, _x.status.heave_vel_aided, _x.status.period_available, _x.status.period_valid,) = _get_struct_IH9d4B().unpack(str[start:end])
      self.status.heave_valid = bool(self.status.heave_valid)
      self.status.heave_vel_aided = bool(self.status.heave_vel_aided)
      self.status.period_available = bool(self.status.period_available)
      self.status.period_valid = bool(self.status.period_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IH9d4B().pack(_x.time_stamp, _x.heave_period, _x.ship_motion.x, _x.ship_motion.y, _x.ship_motion.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.status.heave_valid, _x.status.heave_vel_aided, _x.status.period_available, _x.status.period_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ship_motion is None:
        self.ship_motion = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.status is None:
        self.status = sbg_driver.msg.SbgShipMotionStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.time_stamp, _x.heave_period, _x.ship_motion.x, _x.ship_motion.y, _x.ship_motion.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.status.heave_valid, _x.status.heave_vel_aided, _x.status.period_available, _x.status.period_valid,) = _get_struct_IH9d4B().unpack(str[start:end])
      self.status.heave_valid = bool(self.status.heave_valid)
      self.status.heave_vel_aided = bool(self.status.heave_vel_aided)
      self.status.period_available = bool(self.status.period_available)
      self.status.period_valid = bool(self.status.period_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_IH9d4B = None
def _get_struct_IH9d4B():
    global _struct_IH9d4B
    if _struct_IH9d4B is None:
        _struct_IH9d4B = struct.Struct("<IH9d4B")
    return _struct_IH9d4B
