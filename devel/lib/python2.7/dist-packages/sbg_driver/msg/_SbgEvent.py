# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgEvent.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SbgEvent(genpy.Message):
  _md5sum = "330fcb628fc06f7fd7e2c2276c83adfa"
  _type = "sbg_driver/SbgEvent"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
Header header

# Time since sensor is powered up us 
uint32 time_stamp

# True if we have received events at a higher rate than 1 kHz.
bool overflow

# True if at least two events have been received.
bool offset_0_valid

# True if at least three events have been received.
bool offset_1_valid

# True if at least four events have been received.
bool offset_2_valid

# True if five events have been received.
bool offset_3_valid


# Time offset for the second received event. (us)
uint16 time_offset_0

# Time offset for the third received event. (us)
uint16 time_offset_1

# Time offset for the fourth received event. (us)
uint16  time_offset_2

# Time offset for the fifth received event. (us)
uint16  time_offset_3

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','time_stamp','overflow','offset_0_valid','offset_1_valid','offset_2_valid','offset_3_valid','time_offset_0','time_offset_1','time_offset_2','time_offset_3']
  _slot_types = ['std_msgs/Header','uint32','bool','bool','bool','bool','bool','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_stamp,overflow,offset_0_valid,offset_1_valid,offset_2_valid,offset_3_valid,time_offset_0,time_offset_1,time_offset_2,time_offset_3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgEvent, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.overflow is None:
        self.overflow = False
      if self.offset_0_valid is None:
        self.offset_0_valid = False
      if self.offset_1_valid is None:
        self.offset_1_valid = False
      if self.offset_2_valid is None:
        self.offset_2_valid = False
      if self.offset_3_valid is None:
        self.offset_3_valid = False
      if self.time_offset_0 is None:
        self.time_offset_0 = 0
      if self.time_offset_1 is None:
        self.time_offset_1 = 0
      if self.time_offset_2 is None:
        self.time_offset_2 = 0
      if self.time_offset_3 is None:
        self.time_offset_3 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_stamp = 0
      self.overflow = False
      self.offset_0_valid = False
      self.offset_1_valid = False
      self.offset_2_valid = False
      self.offset_3_valid = False
      self.time_offset_0 = 0
      self.time_offset_1 = 0
      self.time_offset_2 = 0
      self.time_offset_3 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I5B4H().pack(_x.time_stamp, _x.overflow, _x.offset_0_valid, _x.offset_1_valid, _x.offset_2_valid, _x.offset_3_valid, _x.time_offset_0, _x.time_offset_1, _x.time_offset_2, _x.time_offset_3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.time_stamp, _x.overflow, _x.offset_0_valid, _x.offset_1_valid, _x.offset_2_valid, _x.offset_3_valid, _x.time_offset_0, _x.time_offset_1, _x.time_offset_2, _x.time_offset_3,) = _get_struct_I5B4H().unpack(str[start:end])
      self.overflow = bool(self.overflow)
      self.offset_0_valid = bool(self.offset_0_valid)
      self.offset_1_valid = bool(self.offset_1_valid)
      self.offset_2_valid = bool(self.offset_2_valid)
      self.offset_3_valid = bool(self.offset_3_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I5B4H().pack(_x.time_stamp, _x.overflow, _x.offset_0_valid, _x.offset_1_valid, _x.offset_2_valid, _x.offset_3_valid, _x.time_offset_0, _x.time_offset_1, _x.time_offset_2, _x.time_offset_3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.time_stamp, _x.overflow, _x.offset_0_valid, _x.offset_1_valid, _x.offset_2_valid, _x.offset_3_valid, _x.time_offset_0, _x.time_offset_1, _x.time_offset_2, _x.time_offset_3,) = _get_struct_I5B4H().unpack(str[start:end])
      self.overflow = bool(self.overflow)
      self.offset_0_valid = bool(self.offset_0_valid)
      self.offset_1_valid = bool(self.offset_1_valid)
      self.offset_2_valid = bool(self.offset_2_valid)
      self.offset_3_valid = bool(self.offset_3_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I5B4H = None
def _get_struct_I5B4H():
    global _struct_I5B4H
    if _struct_I5B4H is None:
        _struct_I5B4H = struct.Struct("<I5B4H")
    return _struct_I5B4H
