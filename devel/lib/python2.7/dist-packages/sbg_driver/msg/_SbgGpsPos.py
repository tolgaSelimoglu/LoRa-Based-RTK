# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgGpsPos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sbg_driver.msg
import std_msgs.msg

class SbgGpsPos(genpy.Message):
  _md5sum = "6b214c87825603003c01f4e03d945a32"
  _type = "sbg_driver/SbgGpsPos"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
Header header

#  Time since sensor is powered up us 
uint32 time_stamp

# GPS position fix and status bitmask
SbgGpsPosStatus status

# GPS Time of Week ms
uint32 gps_tow

# Latitude [degrees]; Positive is north of equator; negative is south
float64 latitude

# Longitude [degrees]; Positive is east of prime meridian; negative is west
float64 longitude

# Altitude [m]; Positive is above Mean Sea Level in meters
float64 altitude

# Altitude difference between the geoid and the Ellipsoid (WGS-84 Altitude - MSL Altitude)
# (Height above Ellipsoid = altitude + undulation)
float32 undulation

# Position accuracy (1 sigma) [m].
# In NED convention:
#   x: North
#   y: East
#   z: Vertical
# In ENU convention:
#   x: East
#   y: North
#   z: Vertical
geometry_msgs/Vector3 position_accuracy

# Number of space vehicles used in GNSS solution
uint8 num_sv_used

# ID of the DGPS/RTK base station in use
uint16 base_station_id

# Differential data age 0.01 s
uint16 diff_age

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sbg_driver/SbgGpsPosStatus
# SBG Ellipse Messages
# Submessage


# The raw GPS position status
# 0 SOL_COMPUTED		A valid solution has been computed.
# 1 INSUFFICIENT_OBS 	Not enough valid SV to compute a solution.
# 2 INTERNAL_ERROR 		An internal error has occurred.
# 3 HEIGHT_LIMIT 		The height limit has been exceeded.
uint8 status

# The raw GPS position type
# 0 NO_SOLUTION		No valid solution available.
# 1 UNKNOWN_TYPE	An unknown solution type has been computed.
# 2 SINGLE			Single point solution position.
# 3 PSRDIFF			Standard Pseudorange Differential Solution (DGPS).
# 4 SBAS			SBAS satellite used for differential corrections.
# 5 OMNISTAR		Omnistar VBS Position (L1 sub-meter).
# 6 RTK_FLOAT		Floating RTK ambiguity solution (20 cms RTK).
# 7 RTK_INT			Integer RTK ambiguity solution (2 cms RTK).
# 8 PPP_FLOAT		Precise Point Positioning with float ambiguities
# 9 PPP_INT			Precise Point Positioning with fixed ambiguities
# 10 FIXED			Fixed location solution position
uint8 type

# True if GPS L1 is used in the solution
bool gps_l1_used

# True if GPS L2 is used in the solution
bool gps_l2_used

# True if GPS L5 is used in the solution
bool gps_l5_used

# True if GLONASS L1 is used in the solution
bool glo_l1_used

# True if GLONASS L2 is used in the solution
bool glo_l2_used

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','time_stamp','status','gps_tow','latitude','longitude','altitude','undulation','position_accuracy','num_sv_used','base_station_id','diff_age']
  _slot_types = ['std_msgs/Header','uint32','sbg_driver/SbgGpsPosStatus','uint32','float64','float64','float64','float32','geometry_msgs/Vector3','uint8','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_stamp,status,gps_tow,latitude,longitude,altitude,undulation,position_accuracy,num_sv_used,base_station_id,diff_age

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgGpsPos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.status is None:
        self.status = sbg_driver.msg.SbgGpsPosStatus()
      if self.gps_tow is None:
        self.gps_tow = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.position_accuracy is None:
        self.position_accuracy = geometry_msgs.msg.Vector3()
      if self.num_sv_used is None:
        self.num_sv_used = 0
      if self.base_station_id is None:
        self.base_station_id = 0
      if self.diff_age is None:
        self.diff_age = 0
    else:
      self.header = std_msgs.msg.Header()
      self.time_stamp = 0
      self.status = sbg_driver.msg.SbgGpsPosStatus()
      self.gps_tow = 0
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.undulation = 0.
      self.position_accuracy = geometry_msgs.msg.Vector3()
      self.num_sv_used = 0
      self.base_station_id = 0
      self.diff_age = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I7BI3df3dB2H().pack(_x.time_stamp, _x.status.status, _x.status.type, _x.status.gps_l1_used, _x.status.gps_l2_used, _x.status.gps_l5_used, _x.status.glo_l1_used, _x.status.glo_l2_used, _x.gps_tow, _x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.position_accuracy.x, _x.position_accuracy.y, _x.position_accuracy.z, _x.num_sv_used, _x.base_station_id, _x.diff_age))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = sbg_driver.msg.SbgGpsPosStatus()
      if self.position_accuracy is None:
        self.position_accuracy = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.time_stamp, _x.status.status, _x.status.type, _x.status.gps_l1_used, _x.status.gps_l2_used, _x.status.gps_l5_used, _x.status.glo_l1_used, _x.status.glo_l2_used, _x.gps_tow, _x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.position_accuracy.x, _x.position_accuracy.y, _x.position_accuracy.z, _x.num_sv_used, _x.base_station_id, _x.diff_age,) = _get_struct_I7BI3df3dB2H().unpack(str[start:end])
      self.status.gps_l1_used = bool(self.status.gps_l1_used)
      self.status.gps_l2_used = bool(self.status.gps_l2_used)
      self.status.gps_l5_used = bool(self.status.gps_l5_used)
      self.status.glo_l1_used = bool(self.status.glo_l1_used)
      self.status.glo_l2_used = bool(self.status.glo_l2_used)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I7BI3df3dB2H().pack(_x.time_stamp, _x.status.status, _x.status.type, _x.status.gps_l1_used, _x.status.gps_l2_used, _x.status.gps_l5_used, _x.status.glo_l1_used, _x.status.glo_l2_used, _x.gps_tow, _x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.position_accuracy.x, _x.position_accuracy.y, _x.position_accuracy.z, _x.num_sv_used, _x.base_station_id, _x.diff_age))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = sbg_driver.msg.SbgGpsPosStatus()
      if self.position_accuracy is None:
        self.position_accuracy = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.time_stamp, _x.status.status, _x.status.type, _x.status.gps_l1_used, _x.status.gps_l2_used, _x.status.gps_l5_used, _x.status.glo_l1_used, _x.status.glo_l2_used, _x.gps_tow, _x.latitude, _x.longitude, _x.altitude, _x.undulation, _x.position_accuracy.x, _x.position_accuracy.y, _x.position_accuracy.z, _x.num_sv_used, _x.base_station_id, _x.diff_age,) = _get_struct_I7BI3df3dB2H().unpack(str[start:end])
      self.status.gps_l1_used = bool(self.status.gps_l1_used)
      self.status.gps_l2_used = bool(self.status.gps_l2_used)
      self.status.gps_l5_used = bool(self.status.gps_l5_used)
      self.status.glo_l1_used = bool(self.status.glo_l1_used)
      self.status.glo_l2_used = bool(self.status.glo_l2_used)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I7BI3df3dB2H = None
def _get_struct_I7BI3df3dB2H():
    global _struct_I7BI3df3dB2H
    if _struct_I7BI3df3dB2H is None:
        _struct_I7BI3df3dB2H = struct.Struct("<I7BI3df3dB2H")
    return _struct_I7BI3df3dB2H
