# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgMagStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SbgMagStatus(genpy.Message):
  _md5sum = "057cf294623d5a0b037fdcc47f99e3c4"
  _type = "sbg_driver/SbgMagStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
# Submessage

# True if the magnetometer X has passed the self test.
bool mag_x

# True if the magnetometer Y has passed the self test.
bool mag_y

# True if the magnetometer Z has passed the self test.
bool mag_z

# True if the accelerometer X has passed the self test.
bool accel_x

# True if the accelerometer Y has passed the self test.
bool accel_y

# True if the accelerometer Z has passed the self test.
bool accel_z

# True if magnetometer is not saturated
bool mags_in_range

# True if accelerometer is not saturated
bool accels_in_range

# True if magnetometer seems to be calibrated
bool calibration
"""
  __slots__ = ['mag_x','mag_y','mag_z','accel_x','accel_y','accel_z','mags_in_range','accels_in_range','calibration']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mag_x,mag_y,mag_z,accel_x,accel_y,accel_z,mags_in_range,accels_in_range,calibration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgMagStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mag_x is None:
        self.mag_x = False
      if self.mag_y is None:
        self.mag_y = False
      if self.mag_z is None:
        self.mag_z = False
      if self.accel_x is None:
        self.accel_x = False
      if self.accel_y is None:
        self.accel_y = False
      if self.accel_z is None:
        self.accel_z = False
      if self.mags_in_range is None:
        self.mags_in_range = False
      if self.accels_in_range is None:
        self.accels_in_range = False
      if self.calibration is None:
        self.calibration = False
    else:
      self.mag_x = False
      self.mag_y = False
      self.mag_z = False
      self.accel_x = False
      self.accel_y = False
      self.accel_z = False
      self.mags_in_range = False
      self.accels_in_range = False
      self.calibration = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.mag_x, _x.mag_y, _x.mag_z, _x.accel_x, _x.accel_y, _x.accel_z, _x.mags_in_range, _x.accels_in_range, _x.calibration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.mag_x, _x.mag_y, _x.mag_z, _x.accel_x, _x.accel_y, _x.accel_z, _x.mags_in_range, _x.accels_in_range, _x.calibration,) = _get_struct_9B().unpack(str[start:end])
      self.mag_x = bool(self.mag_x)
      self.mag_y = bool(self.mag_y)
      self.mag_z = bool(self.mag_z)
      self.accel_x = bool(self.accel_x)
      self.accel_y = bool(self.accel_y)
      self.accel_z = bool(self.accel_z)
      self.mags_in_range = bool(self.mags_in_range)
      self.accels_in_range = bool(self.accels_in_range)
      self.calibration = bool(self.calibration)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9B().pack(_x.mag_x, _x.mag_y, _x.mag_z, _x.accel_x, _x.accel_y, _x.accel_z, _x.mags_in_range, _x.accels_in_range, _x.calibration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.mag_x, _x.mag_y, _x.mag_z, _x.accel_x, _x.accel_y, _x.accel_z, _x.mags_in_range, _x.accels_in_range, _x.calibration,) = _get_struct_9B().unpack(str[start:end])
      self.mag_x = bool(self.mag_x)
      self.mag_y = bool(self.mag_y)
      self.mag_z = bool(self.mag_z)
      self.accel_x = bool(self.accel_x)
      self.accel_y = bool(self.accel_y)
      self.accel_z = bool(self.accel_z)
      self.mags_in_range = bool(self.mags_in_range)
      self.accels_in_range = bool(self.accels_in_range)
      self.calibration = bool(self.calibration)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9B = None
def _get_struct_9B():
    global _struct_9B
    if _struct_9B is None:
        _struct_9B = struct.Struct("<9B")
    return _struct_9B
