# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sbg_driver.msg
import std_msgs.msg

class SbgStatus(genpy.Message):
  _md5sum = "1b73c890bd111d40339f4be9a7495e96"
  _type = "sbg_driver/SbgStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages

Header header

# Time since sensor is powered up (in us)
uint32 time_stamp

# General status bitmask and enums
SbgStatusGeneral status_general

# Communication status bitmask and enums.
SbgStatusCom status_com

# Aiding equipments status bitmask and enums.
SbgStatusAiding status_aiding

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sbg_driver/SbgStatusGeneral
# SBG Ellipse Messages
# SbgStatus submessage

# General main power
# True when main power supply is OK.
bool main_power

# General imu power
# True when IMU power supply is OK.
bool imu_power

# General gps power
# Set to True when GPS power supply is OK.
bool gps_power

# General Settings
# True if settings were correctly loaded
bool settings

# General Temperature
# True when temperature is within specified limits.
bool temperature
================================================================================
MSG: sbg_driver/SbgStatusCom
# SBG Ellipse Messages
# SbgStatus submessage

# PORT A: False in case of low level communication error.
bool port_a

# PORT B: False in case of low level communication error.
bool port_b

# PORT C: False in case of low level communication error.
bool port_c

# PORT D: False in case of low level communication error.
bool port_d

# PORT E: False in case of low level communication error.
bool port_e

# PORT A RX: False in case of saturation on PORT A input
bool port_a_rx

# PORT A TX: False in case of saturation on PORT A output
bool port_a_tx

# PORT B RX: False in case of saturation on PORT B input
bool port_b_rx

# PORT B TX: False in case of saturation on PORT B output
bool port_b_tx

# PORT C RX: False in case of saturation on PORT C input
bool port_c_rx

# PORT C TX: False in case of saturation on PORT C output
bool port_c_tx

# PORT D RX: False in case of saturation on PORT D input
bool port_d_rx

# PORT D TX: False in case of saturation on PORT D output
bool port_d_tx

# PORT E RX: False in case of saturation on PORT E input
bool port_e_rx

# PORT E TX: False in case of saturation on PORT E output
bool port_e_tx

# CAN RX: False in case of saturation on CAN Bus output buffer
bool can_rx

# CAN TX: False in case of saturation on CAN Bus input buffer
bool can_tx

# CAN BUS
# 0 CAN BUS OFF 		Bus OFF operation due to too much errors.
# 1 CAN BUS TX_RX_ERR 	Transmit or received error.
# 2 CAN BUS OK 			The CAN bus is working correctly.
# 3 CAN BUS ERROR 		A general error has occurred on the CAN bus.
uint8 can_status
================================================================================
MSG: sbg_driver/SbgStatusAiding
# SBG Ellipse Messages
# SbgStatus submessage

# AIDING_GPS1_POS_RECV true when valid GPS 1 position data is received
bool gps1_pos_recv

# AIDING_GPS1_VEL_RECV true when valid GPS 1 velocity data is received
bool gps1_vel_recv

# AIDING_GPS1_HDT_RECV true when valid GPS 1 true heading data is received
bool gps1_hdt_recv

# AIDING_GPS1_UTC_RECV true when valid GPS 1 UTC time data is received
bool gps1_utc_recv

# AIDING_MAG_RECV true when valid Magnetometer data is received
bool mag_recv

# AIDING_ODO_RECV true when Odometer pulse is received
bool odo_recv

# AIDING_DVL_RECV true when valid DVL data is received
bool dvl_recv
"""
  __slots__ = ['header','time_stamp','status_general','status_com','status_aiding']
  _slot_types = ['std_msgs/Header','uint32','sbg_driver/SbgStatusGeneral','sbg_driver/SbgStatusCom','sbg_driver/SbgStatusAiding']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_stamp,status_general,status_com,status_aiding

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.status_general is None:
        self.status_general = sbg_driver.msg.SbgStatusGeneral()
      if self.status_com is None:
        self.status_com = sbg_driver.msg.SbgStatusCom()
      if self.status_aiding is None:
        self.status_aiding = sbg_driver.msg.SbgStatusAiding()
    else:
      self.header = std_msgs.msg.Header()
      self.time_stamp = 0
      self.status_general = sbg_driver.msg.SbgStatusGeneral()
      self.status_com = sbg_driver.msg.SbgStatusCom()
      self.status_aiding = sbg_driver.msg.SbgStatusAiding()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I30B().pack(_x.time_stamp, _x.status_general.main_power, _x.status_general.imu_power, _x.status_general.gps_power, _x.status_general.settings, _x.status_general.temperature, _x.status_com.port_a, _x.status_com.port_b, _x.status_com.port_c, _x.status_com.port_d, _x.status_com.port_e, _x.status_com.port_a_rx, _x.status_com.port_a_tx, _x.status_com.port_b_rx, _x.status_com.port_b_tx, _x.status_com.port_c_rx, _x.status_com.port_c_tx, _x.status_com.port_d_rx, _x.status_com.port_d_tx, _x.status_com.port_e_rx, _x.status_com.port_e_tx, _x.status_com.can_rx, _x.status_com.can_tx, _x.status_com.can_status, _x.status_aiding.gps1_pos_recv, _x.status_aiding.gps1_vel_recv, _x.status_aiding.gps1_hdt_recv, _x.status_aiding.gps1_utc_recv, _x.status_aiding.mag_recv, _x.status_aiding.odo_recv, _x.status_aiding.dvl_recv))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status_general is None:
        self.status_general = sbg_driver.msg.SbgStatusGeneral()
      if self.status_com is None:
        self.status_com = sbg_driver.msg.SbgStatusCom()
      if self.status_aiding is None:
        self.status_aiding = sbg_driver.msg.SbgStatusAiding()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.time_stamp, _x.status_general.main_power, _x.status_general.imu_power, _x.status_general.gps_power, _x.status_general.settings, _x.status_general.temperature, _x.status_com.port_a, _x.status_com.port_b, _x.status_com.port_c, _x.status_com.port_d, _x.status_com.port_e, _x.status_com.port_a_rx, _x.status_com.port_a_tx, _x.status_com.port_b_rx, _x.status_com.port_b_tx, _x.status_com.port_c_rx, _x.status_com.port_c_tx, _x.status_com.port_d_rx, _x.status_com.port_d_tx, _x.status_com.port_e_rx, _x.status_com.port_e_tx, _x.status_com.can_rx, _x.status_com.can_tx, _x.status_com.can_status, _x.status_aiding.gps1_pos_recv, _x.status_aiding.gps1_vel_recv, _x.status_aiding.gps1_hdt_recv, _x.status_aiding.gps1_utc_recv, _x.status_aiding.mag_recv, _x.status_aiding.odo_recv, _x.status_aiding.dvl_recv,) = _get_struct_I30B().unpack(str[start:end])
      self.status_general.main_power = bool(self.status_general.main_power)
      self.status_general.imu_power = bool(self.status_general.imu_power)
      self.status_general.gps_power = bool(self.status_general.gps_power)
      self.status_general.settings = bool(self.status_general.settings)
      self.status_general.temperature = bool(self.status_general.temperature)
      self.status_com.port_a = bool(self.status_com.port_a)
      self.status_com.port_b = bool(self.status_com.port_b)
      self.status_com.port_c = bool(self.status_com.port_c)
      self.status_com.port_d = bool(self.status_com.port_d)
      self.status_com.port_e = bool(self.status_com.port_e)
      self.status_com.port_a_rx = bool(self.status_com.port_a_rx)
      self.status_com.port_a_tx = bool(self.status_com.port_a_tx)
      self.status_com.port_b_rx = bool(self.status_com.port_b_rx)
      self.status_com.port_b_tx = bool(self.status_com.port_b_tx)
      self.status_com.port_c_rx = bool(self.status_com.port_c_rx)
      self.status_com.port_c_tx = bool(self.status_com.port_c_tx)
      self.status_com.port_d_rx = bool(self.status_com.port_d_rx)
      self.status_com.port_d_tx = bool(self.status_com.port_d_tx)
      self.status_com.port_e_rx = bool(self.status_com.port_e_rx)
      self.status_com.port_e_tx = bool(self.status_com.port_e_tx)
      self.status_com.can_rx = bool(self.status_com.can_rx)
      self.status_com.can_tx = bool(self.status_com.can_tx)
      self.status_aiding.gps1_pos_recv = bool(self.status_aiding.gps1_pos_recv)
      self.status_aiding.gps1_vel_recv = bool(self.status_aiding.gps1_vel_recv)
      self.status_aiding.gps1_hdt_recv = bool(self.status_aiding.gps1_hdt_recv)
      self.status_aiding.gps1_utc_recv = bool(self.status_aiding.gps1_utc_recv)
      self.status_aiding.mag_recv = bool(self.status_aiding.mag_recv)
      self.status_aiding.odo_recv = bool(self.status_aiding.odo_recv)
      self.status_aiding.dvl_recv = bool(self.status_aiding.dvl_recv)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I30B().pack(_x.time_stamp, _x.status_general.main_power, _x.status_general.imu_power, _x.status_general.gps_power, _x.status_general.settings, _x.status_general.temperature, _x.status_com.port_a, _x.status_com.port_b, _x.status_com.port_c, _x.status_com.port_d, _x.status_com.port_e, _x.status_com.port_a_rx, _x.status_com.port_a_tx, _x.status_com.port_b_rx, _x.status_com.port_b_tx, _x.status_com.port_c_rx, _x.status_com.port_c_tx, _x.status_com.port_d_rx, _x.status_com.port_d_tx, _x.status_com.port_e_rx, _x.status_com.port_e_tx, _x.status_com.can_rx, _x.status_com.can_tx, _x.status_com.can_status, _x.status_aiding.gps1_pos_recv, _x.status_aiding.gps1_vel_recv, _x.status_aiding.gps1_hdt_recv, _x.status_aiding.gps1_utc_recv, _x.status_aiding.mag_recv, _x.status_aiding.odo_recv, _x.status_aiding.dvl_recv))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status_general is None:
        self.status_general = sbg_driver.msg.SbgStatusGeneral()
      if self.status_com is None:
        self.status_com = sbg_driver.msg.SbgStatusCom()
      if self.status_aiding is None:
        self.status_aiding = sbg_driver.msg.SbgStatusAiding()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.time_stamp, _x.status_general.main_power, _x.status_general.imu_power, _x.status_general.gps_power, _x.status_general.settings, _x.status_general.temperature, _x.status_com.port_a, _x.status_com.port_b, _x.status_com.port_c, _x.status_com.port_d, _x.status_com.port_e, _x.status_com.port_a_rx, _x.status_com.port_a_tx, _x.status_com.port_b_rx, _x.status_com.port_b_tx, _x.status_com.port_c_rx, _x.status_com.port_c_tx, _x.status_com.port_d_rx, _x.status_com.port_d_tx, _x.status_com.port_e_rx, _x.status_com.port_e_tx, _x.status_com.can_rx, _x.status_com.can_tx, _x.status_com.can_status, _x.status_aiding.gps1_pos_recv, _x.status_aiding.gps1_vel_recv, _x.status_aiding.gps1_hdt_recv, _x.status_aiding.gps1_utc_recv, _x.status_aiding.mag_recv, _x.status_aiding.odo_recv, _x.status_aiding.dvl_recv,) = _get_struct_I30B().unpack(str[start:end])
      self.status_general.main_power = bool(self.status_general.main_power)
      self.status_general.imu_power = bool(self.status_general.imu_power)
      self.status_general.gps_power = bool(self.status_general.gps_power)
      self.status_general.settings = bool(self.status_general.settings)
      self.status_general.temperature = bool(self.status_general.temperature)
      self.status_com.port_a = bool(self.status_com.port_a)
      self.status_com.port_b = bool(self.status_com.port_b)
      self.status_com.port_c = bool(self.status_com.port_c)
      self.status_com.port_d = bool(self.status_com.port_d)
      self.status_com.port_e = bool(self.status_com.port_e)
      self.status_com.port_a_rx = bool(self.status_com.port_a_rx)
      self.status_com.port_a_tx = bool(self.status_com.port_a_tx)
      self.status_com.port_b_rx = bool(self.status_com.port_b_rx)
      self.status_com.port_b_tx = bool(self.status_com.port_b_tx)
      self.status_com.port_c_rx = bool(self.status_com.port_c_rx)
      self.status_com.port_c_tx = bool(self.status_com.port_c_tx)
      self.status_com.port_d_rx = bool(self.status_com.port_d_rx)
      self.status_com.port_d_tx = bool(self.status_com.port_d_tx)
      self.status_com.port_e_rx = bool(self.status_com.port_e_rx)
      self.status_com.port_e_tx = bool(self.status_com.port_e_tx)
      self.status_com.can_rx = bool(self.status_com.can_rx)
      self.status_com.can_tx = bool(self.status_com.can_tx)
      self.status_aiding.gps1_pos_recv = bool(self.status_aiding.gps1_pos_recv)
      self.status_aiding.gps1_vel_recv = bool(self.status_aiding.gps1_vel_recv)
      self.status_aiding.gps1_hdt_recv = bool(self.status_aiding.gps1_hdt_recv)
      self.status_aiding.gps1_utc_recv = bool(self.status_aiding.gps1_utc_recv)
      self.status_aiding.mag_recv = bool(self.status_aiding.mag_recv)
      self.status_aiding.odo_recv = bool(self.status_aiding.odo_recv)
      self.status_aiding.dvl_recv = bool(self.status_aiding.dvl_recv)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I30B = None
def _get_struct_I30B():
    global _struct_I30B
    if _struct_I30B is None:
        _struct_I30B = struct.Struct("<I30B")
    return _struct_I30B
