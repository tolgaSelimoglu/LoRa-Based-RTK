# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgStatusGeneral.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SbgStatusGeneral(genpy.Message):
  _md5sum = "693fdf7e799b5fc52833d1649c048053"
  _type = "sbg_driver/SbgStatusGeneral"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
# SbgStatus submessage

# General main power
# True when main power supply is OK.
bool main_power

# General imu power
# True when IMU power supply is OK.
bool imu_power

# General gps power
# Set to True when GPS power supply is OK.
bool gps_power

# General Settings
# True if settings were correctly loaded
bool settings

# General Temperature
# True when temperature is within specified limits.
bool temperature"""
  __slots__ = ['main_power','imu_power','gps_power','settings','temperature']
  _slot_types = ['bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       main_power,imu_power,gps_power,settings,temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgStatusGeneral, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.main_power is None:
        self.main_power = False
      if self.imu_power is None:
        self.imu_power = False
      if self.gps_power is None:
        self.gps_power = False
      if self.settings is None:
        self.settings = False
      if self.temperature is None:
        self.temperature = False
    else:
      self.main_power = False
      self.imu_power = False
      self.gps_power = False
      self.settings = False
      self.temperature = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.main_power, _x.imu_power, _x.gps_power, _x.settings, _x.temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.main_power, _x.imu_power, _x.gps_power, _x.settings, _x.temperature,) = _get_struct_5B().unpack(str[start:end])
      self.main_power = bool(self.main_power)
      self.imu_power = bool(self.imu_power)
      self.gps_power = bool(self.gps_power)
      self.settings = bool(self.settings)
      self.temperature = bool(self.temperature)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B().pack(_x.main_power, _x.imu_power, _x.gps_power, _x.settings, _x.temperature))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.main_power, _x.imu_power, _x.gps_power, _x.settings, _x.temperature,) = _get_struct_5B().unpack(str[start:end])
      self.main_power = bool(self.main_power)
      self.imu_power = bool(self.imu_power)
      self.gps_power = bool(self.gps_power)
      self.settings = bool(self.settings)
      self.temperature = bool(self.temperature)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B = None
def _get_struct_5B():
    global _struct_5B
    if _struct_5B is None:
        _struct_5B = struct.Struct("<5B")
    return _struct_5B
