# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgStatusAiding.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SbgStatusAiding(genpy.Message):
  _md5sum = "873fbacbcfa106e3f518a7cd0cce3cfb"
  _type = "sbg_driver/SbgStatusAiding"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
# SbgStatus submessage

# AIDING_GPS1_POS_RECV true when valid GPS 1 position data is received
bool gps1_pos_recv

# AIDING_GPS1_VEL_RECV true when valid GPS 1 velocity data is received
bool gps1_vel_recv

# AIDING_GPS1_HDT_RECV true when valid GPS 1 true heading data is received
bool gps1_hdt_recv

# AIDING_GPS1_UTC_RECV true when valid GPS 1 UTC time data is received
bool gps1_utc_recv

# AIDING_MAG_RECV true when valid Magnetometer data is received
bool mag_recv

# AIDING_ODO_RECV true when Odometer pulse is received
bool odo_recv

# AIDING_DVL_RECV true when valid DVL data is received
bool dvl_recv
"""
  __slots__ = ['gps1_pos_recv','gps1_vel_recv','gps1_hdt_recv','gps1_utc_recv','mag_recv','odo_recv','dvl_recv']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gps1_pos_recv,gps1_vel_recv,gps1_hdt_recv,gps1_utc_recv,mag_recv,odo_recv,dvl_recv

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgStatusAiding, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gps1_pos_recv is None:
        self.gps1_pos_recv = False
      if self.gps1_vel_recv is None:
        self.gps1_vel_recv = False
      if self.gps1_hdt_recv is None:
        self.gps1_hdt_recv = False
      if self.gps1_utc_recv is None:
        self.gps1_utc_recv = False
      if self.mag_recv is None:
        self.mag_recv = False
      if self.odo_recv is None:
        self.odo_recv = False
      if self.dvl_recv is None:
        self.dvl_recv = False
    else:
      self.gps1_pos_recv = False
      self.gps1_vel_recv = False
      self.gps1_hdt_recv = False
      self.gps1_utc_recv = False
      self.mag_recv = False
      self.odo_recv = False
      self.dvl_recv = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.gps1_pos_recv, _x.gps1_vel_recv, _x.gps1_hdt_recv, _x.gps1_utc_recv, _x.mag_recv, _x.odo_recv, _x.dvl_recv))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.gps1_pos_recv, _x.gps1_vel_recv, _x.gps1_hdt_recv, _x.gps1_utc_recv, _x.mag_recv, _x.odo_recv, _x.dvl_recv,) = _get_struct_7B().unpack(str[start:end])
      self.gps1_pos_recv = bool(self.gps1_pos_recv)
      self.gps1_vel_recv = bool(self.gps1_vel_recv)
      self.gps1_hdt_recv = bool(self.gps1_hdt_recv)
      self.gps1_utc_recv = bool(self.gps1_utc_recv)
      self.mag_recv = bool(self.mag_recv)
      self.odo_recv = bool(self.odo_recv)
      self.dvl_recv = bool(self.dvl_recv)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.gps1_pos_recv, _x.gps1_vel_recv, _x.gps1_hdt_recv, _x.gps1_utc_recv, _x.mag_recv, _x.odo_recv, _x.dvl_recv))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.gps1_pos_recv, _x.gps1_vel_recv, _x.gps1_hdt_recv, _x.gps1_utc_recv, _x.mag_recv, _x.odo_recv, _x.dvl_recv,) = _get_struct_7B().unpack(str[start:end])
      self.gps1_pos_recv = bool(self.gps1_pos_recv)
      self.gps1_vel_recv = bool(self.gps1_vel_recv)
      self.gps1_hdt_recv = bool(self.gps1_hdt_recv)
      self.gps1_utc_recv = bool(self.gps1_utc_recv)
      self.mag_recv = bool(self.mag_recv)
      self.odo_recv = bool(self.odo_recv)
      self.dvl_recv = bool(self.dvl_recv)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
