# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgImuStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SbgImuStatus(genpy.Message):
  _md5sum = "e9a1bd33215fe69b9523e359cacbe127"
  _type = "sbg_driver/SbgImuStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
# Submessage SbgImuData

# True if the communication with the IMU is ok.
bool imu_com

# True if internal IMU passes Built In Test (Calibration, CPU)
bool imu_status

# True if accelerometer X passes Built In Test
bool imu_accel_x

# True if accelerometer Y passes Built In Test
bool imu_accel_y

# True if accelerometer Z passes Built In Test
bool imu_accel_z

# True if gyroscope X passes Built In Test
bool imu_gyro_x

# True if gyroscope Y passes Built In Test
bool imu_gyro_y

# True if gyroscope Z passes Built In Test
bool imu_gyro_z

# True if accelerometers are within operating range
bool imu_accels_in_range

# True if gyroscopes are within operating range
bool imu_gyros_in_range
"""
  __slots__ = ['imu_com','imu_status','imu_accel_x','imu_accel_y','imu_accel_z','imu_gyro_x','imu_gyro_y','imu_gyro_z','imu_accels_in_range','imu_gyros_in_range']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       imu_com,imu_status,imu_accel_x,imu_accel_y,imu_accel_z,imu_gyro_x,imu_gyro_y,imu_gyro_z,imu_accels_in_range,imu_gyros_in_range

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgImuStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.imu_com is None:
        self.imu_com = False
      if self.imu_status is None:
        self.imu_status = False
      if self.imu_accel_x is None:
        self.imu_accel_x = False
      if self.imu_accel_y is None:
        self.imu_accel_y = False
      if self.imu_accel_z is None:
        self.imu_accel_z = False
      if self.imu_gyro_x is None:
        self.imu_gyro_x = False
      if self.imu_gyro_y is None:
        self.imu_gyro_y = False
      if self.imu_gyro_z is None:
        self.imu_gyro_z = False
      if self.imu_accels_in_range is None:
        self.imu_accels_in_range = False
      if self.imu_gyros_in_range is None:
        self.imu_gyros_in_range = False
    else:
      self.imu_com = False
      self.imu_status = False
      self.imu_accel_x = False
      self.imu_accel_y = False
      self.imu_accel_z = False
      self.imu_gyro_x = False
      self.imu_gyro_y = False
      self.imu_gyro_z = False
      self.imu_accels_in_range = False
      self.imu_gyros_in_range = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.imu_com, _x.imu_status, _x.imu_accel_x, _x.imu_accel_y, _x.imu_accel_z, _x.imu_gyro_x, _x.imu_gyro_y, _x.imu_gyro_z, _x.imu_accels_in_range, _x.imu_gyros_in_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.imu_com, _x.imu_status, _x.imu_accel_x, _x.imu_accel_y, _x.imu_accel_z, _x.imu_gyro_x, _x.imu_gyro_y, _x.imu_gyro_z, _x.imu_accels_in_range, _x.imu_gyros_in_range,) = _get_struct_10B().unpack(str[start:end])
      self.imu_com = bool(self.imu_com)
      self.imu_status = bool(self.imu_status)
      self.imu_accel_x = bool(self.imu_accel_x)
      self.imu_accel_y = bool(self.imu_accel_y)
      self.imu_accel_z = bool(self.imu_accel_z)
      self.imu_gyro_x = bool(self.imu_gyro_x)
      self.imu_gyro_y = bool(self.imu_gyro_y)
      self.imu_gyro_z = bool(self.imu_gyro_z)
      self.imu_accels_in_range = bool(self.imu_accels_in_range)
      self.imu_gyros_in_range = bool(self.imu_gyros_in_range)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_10B().pack(_x.imu_com, _x.imu_status, _x.imu_accel_x, _x.imu_accel_y, _x.imu_accel_z, _x.imu_gyro_x, _x.imu_gyro_y, _x.imu_gyro_z, _x.imu_accels_in_range, _x.imu_gyros_in_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.imu_com, _x.imu_status, _x.imu_accel_x, _x.imu_accel_y, _x.imu_accel_z, _x.imu_gyro_x, _x.imu_gyro_y, _x.imu_gyro_z, _x.imu_accels_in_range, _x.imu_gyros_in_range,) = _get_struct_10B().unpack(str[start:end])
      self.imu_com = bool(self.imu_com)
      self.imu_status = bool(self.imu_status)
      self.imu_accel_x = bool(self.imu_accel_x)
      self.imu_accel_y = bool(self.imu_accel_y)
      self.imu_accel_z = bool(self.imu_accel_z)
      self.imu_gyro_x = bool(self.imu_gyro_x)
      self.imu_gyro_y = bool(self.imu_gyro_y)
      self.imu_gyro_z = bool(self.imu_gyro_z)
      self.imu_accels_in_range = bool(self.imu_accels_in_range)
      self.imu_gyros_in_range = bool(self.imu_gyros_in_range)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10B = None
def _get_struct_10B():
    global _struct_10B
    if _struct_10B is None:
        _struct_10B = struct.Struct("<10B")
    return _struct_10B
