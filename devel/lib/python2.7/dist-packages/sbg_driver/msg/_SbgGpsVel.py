# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sbg_driver/SbgGpsVel.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sbg_driver.msg
import std_msgs.msg

class SbgGpsVel(genpy.Message):
  _md5sum = "dc36a4705c96041ace5f0875af58a725"
  _type = "sbg_driver/SbgGpsVel"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# SBG Ellipse Messages
Header header

#  Time since sensor is powered up [us]
uint32 time_stamp

# GPS velocity fix and status bitmask
SbgGpsVelStatus status

# GPS Time of Week [ms]
uint32 gps_tow

# Velocity [m/s]
# In NED convention:
#   X: North
#   Y: East
#   Z: Down
# In ENU convention:
#   X: East
#   Y: North
#   Z: Up
geometry_msgs/Vector3 velocity

# Velocity accuracy (1 sigma) [m/s]
# In NED convention:
#   X: North
#   Y: East
#   Z: Vertical
# In ENU convention:
#   X: East
#   Y: North
#   Z: Vertical
geometry_msgs/Vector3 velocity_accuracy

# True direction of motion over ground (0 to 360 deg)
# NED convention: Zero when the X axis is pointing North.
# ENU convention: Zero when the X axis is pointing East. (opposite sign compared to NED)
float32 course

# 1 sigma course accuracy
float32 course_acc

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sbg_driver/SbgGpsVelStatus
# SBG Ellipse Messages
# Submessage

# The raw GPS velocity status
# 0 SOL_COMPUTED		A valid solution has been computed.
# 1 INSUFFICIENT_OBS	Not enough valid SV to compute a solution.
# 2 INTERNAL_ERROR		An internal error has occurred.
# 3 LIMIT				Velocity limit exceeded.
uint8 vel_status

# The raw GPS velocity type
# 0 VEL_NO_SOLUTION		No valid velocity solution available.
# 1 VEL_UNKNOWN_TYPE	An unknown solution type has been computed.
# 2 VEL_DOPPLER			A Doppler velocity has been computed.
# 3 VEL_DIFFERENTIAL	A velocity has been computed between two positions.
uint8 vel_type
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','time_stamp','status','gps_tow','velocity','velocity_accuracy','course','course_acc']
  _slot_types = ['std_msgs/Header','uint32','sbg_driver/SbgGpsVelStatus','uint32','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,time_stamp,status,gps_tow,velocity,velocity_accuracy,course,course_acc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SbgGpsVel, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.time_stamp is None:
        self.time_stamp = 0
      if self.status is None:
        self.status = sbg_driver.msg.SbgGpsVelStatus()
      if self.gps_tow is None:
        self.gps_tow = 0
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.velocity_accuracy is None:
        self.velocity_accuracy = geometry_msgs.msg.Vector3()
      if self.course is None:
        self.course = 0.
      if self.course_acc is None:
        self.course_acc = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.time_stamp = 0
      self.status = sbg_driver.msg.SbgGpsVelStatus()
      self.gps_tow = 0
      self.velocity = geometry_msgs.msg.Vector3()
      self.velocity_accuracy = geometry_msgs.msg.Vector3()
      self.course = 0.
      self.course_acc = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2BI6d2f().pack(_x.time_stamp, _x.status.vel_status, _x.status.vel_type, _x.gps_tow, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity_accuracy.x, _x.velocity_accuracy.y, _x.velocity_accuracy.z, _x.course, _x.course_acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = sbg_driver.msg.SbgGpsVelStatus()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.velocity_accuracy is None:
        self.velocity_accuracy = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.time_stamp, _x.status.vel_status, _x.status.vel_type, _x.gps_tow, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity_accuracy.x, _x.velocity_accuracy.y, _x.velocity_accuracy.z, _x.course, _x.course_acc,) = _get_struct_I2BI6d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2BI6d2f().pack(_x.time_stamp, _x.status.vel_status, _x.status.vel_type, _x.gps_tow, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity_accuracy.x, _x.velocity_accuracy.y, _x.velocity_accuracy.z, _x.course, _x.course_acc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = sbg_driver.msg.SbgGpsVelStatus()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.velocity_accuracy is None:
        self.velocity_accuracy = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.time_stamp, _x.status.vel_status, _x.status.vel_type, _x.gps_tow, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.velocity_accuracy.x, _x.velocity_accuracy.y, _x.velocity_accuracy.z, _x.course, _x.course_acc,) = _get_struct_I2BI6d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_I2BI6d2f = None
def _get_struct_I2BI6d2f():
    global _struct_I2BI6d2f
    if _struct_I2BI6d2f is None:
        _struct_I2BI6d2f = struct.Struct("<I2BI6d2f")
    return _struct_I2BI6d2f
